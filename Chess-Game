import pygame

# Tile creator
Class Square:
    def __init__(see, x, y, width, height):
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.abs_x = x * width
    self.abs_y = y *height
    self.abs_pos = (self.abs_x, self.abs_y)
    self.pos = (x, y)
    self.color = ‘light’ if (x + y) % 2 = 0 else ‘dark’
    self.draw_color (220, 208, 194) if self.color == ‘light’ else (53, 53, 53)
    self.highlight_color = (100, 249, 83) if self.color == ‘light’ else (0, 22, 228, 10)
    self.occupying_piece = None
    self.coord = self.get_coord()
    self.highlight = False
    self.rect = pygame.Rect(
        self.abs_x,
        self.abs_y,
        self.width
        self.height
    )
# Get the formal notation of the tile
    def get_coord(self):
        columns = ‘abcdefgh’
        return columns[self.x] + str(self.y + 1)

    def draw(self, display):
# configures if tile should belight or dark or highlighted tile
    if self.highlight:
        pygame.draw.rect(display, self.highlight_color, self.rect)
    else:
        pygame.draw.rect(display, self.draw_color, self.rect)
# adds the chess piece icons
    if self.occupying_piece != None:
        centering_rect = self.occupying_piece.img.get_rect()
        centering_rect.center = self.rect.center
        display.blit(self.occupying_piece.img, centering)rect.topleft)

# /*Board.py
import pygame
From data.classes.Square import Square
From data.classes.pieces.Rook import Rook
From data.calsses.pieces.Bishop import Bishop
From data.classes.pieces.Knight import Knight
From data.calsses.pieces.Queen import Queen
From data.classes.pieces.King import King
From data.classes.pieces.Pawn import Pawn

#Game state checker
Class Board:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.tile_width = width // 8
        self.tile_height = height // 8
        self.selected_piece = None
        self.turn = ‘white’
        self.config = [
            [‘bR’, ‘bN’, ‘bB’